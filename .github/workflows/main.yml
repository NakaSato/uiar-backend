name: Build & Publish to AWS ECR

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Add permissions for the workflow to push tags
permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Make mvnw executable
      run: chmod +x ./mvnw
        
    - name: Run tests
      run: ./mvnw clean test
      
    - name: List test reports (debug)
      run: |
        echo "Checking for surefire reports..."
        ls -la target/surefire-reports/ || echo "No surefire-reports directory found"
        find target -name "TEST-*.xml" -type f || echo "No TEST-*.xml files found"
      
    - name: Build and package application
      run: ./mvnw clean compile package -DskipTests
      
    - name: Verify JAR file
      run: |
        echo "Checking for generated JAR files..."
        ls -la target/*.jar || echo "No JAR files found"
        
  push-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        
      - name: Login to Amazon ECR
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine if release is needed
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: check-release
        run: |
          # Check if we need to create a release
          # Skip if the commit message contains [skip-release] or [no-release]
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Commit message: $COMMIT_MSG"
          
          if echo "$COMMIT_MSG" | grep -qE "\[(skip-release|no-release)\]"; then
            echo "üö´ Release skipped due to commit message flag"
            echo "should-release=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Release should be created"
            echo "should-release=true" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.check-release.outputs.should-release == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Verify Git Setup
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.check-release.outputs.should-release == 'true'
        run: |
          echo "üîç Verifying Git setup..."
          echo "Git user: $(git config user.name)"
          echo "Git email: $(git config user.email)"
          echo "Remote origin: $(git remote get-url origin)"
          echo "Current branch: $(git branch --show-current)"
          echo "GITHUB_TOKEN available: $([[ -n "$GITHUB_TOKEN" ]] && echo "Yes" || echo "No")"
          
          # Verify we can access the repo
          git ls-remote --heads origin || echo "‚ö†Ô∏è  Cannot access remote repository"

      - name: Auto Tagging of Releases
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.check-release.outputs.should-release == 'true'
        id: increment-git-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x ./init-scripts/git_update.sh
          bash ./init-scripts/git_update.sh -v auto
          
      - name: Debug tag output
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.check-release.outputs.should-release == 'true'
        run: |
          echo "Generated tag: ${{ steps.increment-git-tag.outputs.git-tag }}"
          echo "Using tag for Docker: ${{ steps.increment-git-tag.outputs.git-tag }}"
        
      - name: Build and push Docker image to ECR
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.check-release.outputs.should-release == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: uiar-backend
          IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        run: |
          echo "üê≥ Building Docker image with tag: ${{ steps.increment-git-tag.outputs.git-tag }}"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          echo "üì§ Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "‚úÖ Successfully pushed images:"
          echo "- $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "- $ECR_REGISTRY/$ECR_REPOSITORY:latest"
